<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://trojannode.github.io/news/article-39040.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>netty系列之:netty中的自动解码器ReplayingDecoder_在线工具</title>
        <meta name="description" content="目录  简介 ByteToMessageDecoder可能遇到的问题 ReplayingDecoder的实现原理 总结    netty提供了一个从ByteBuf到用户自定义的message的解码器叫" />
        <link rel="icon" href="/assets/website/img/trojannode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="TrojanNode免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://trojannode.github.io/news/article-39040.htm" />
    <meta property="og:site_name" content="TrojanNode免费节点官网" />
    <meta property="og:title" content="netty系列之:netty中的自动解码器ReplayingDecoder_在线工具" />
    <meta property="og:image" content="https://trojannode.github.io/uploads/20240807/e1cd3f0128d3ca4e5651b35e0ffc27ca.webp" />
        <meta property="og:release_date" content="2025-01-11T10:04:02" />
    <meta property="og:updated_time" content="2025-01-11T10:04:02" />
        <meta property="og:description" content="目录  简介 ByteToMessageDecoder可能遇到的问题 ReplayingDecoder的实现原理 总结    netty提供了一个从ByteBuf到用户自定义的message的解码器叫" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="netty系列之:netty中的自动解码器ReplayingDecoder_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/trojannode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/remixicon/remixicon.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/trojannode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/trojannode/style.css" rel="stylesheet">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-THYLRGLVV9"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-THYLRGLVV9');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top ">
        <div class="container d-flex align-items-center justify-content-between">
                        <a href="/"><span class="logo">Troja Nnode</span></a>
                        <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="#">关于</a></li>
                    <li><a class="nav-link" href="#">联系</a></li>
                </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h2>netty系列之:netty中的自动解码器ReplayingDecoder_在线工具</h2>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= About Section ======= -->
        <section id="about" class="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</p> <div class="toc"> <div class="toc-container-header">目录</div> <ul> <li><a href="#%E7%AE%80%E4%BB%8B"  rel="nofollow">简介</a></li> <li><a href="#bytetomessagedecoder%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98"  rel="nofollow">ByteToMessageDecoder可能遇到的问题</a></li> <li><a href="#replayingdecoder%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"  rel="nofollow">ReplayingDecoder的实现原理</a></li> <li><a href="#%E6%80%BB%E7%BB%93"  rel="nofollow">总结</a></li> </ul> </div> </h1> <p>netty提供了一个从ByteBuf到用户自定义的message的解码器叫做ByteToMessageDecoder,要使用这个decoder，我们需要继承这个decoder，并实现decode方法，从而在这个方法中实现ByteBuf中的内容到用户自定义message对象的转换。</p> <p>那么在使用ByteToMessageDecoder的过程中会遇到什么问题呢？为什么又会有一个ReplayingDecoder呢？带着这个问题我们一起来看看吧。</p> </h1> <p>要想实现自己的解码器将ByteBuf转换成为自己的消息对象，可以继承ByteToMessageDecoder，然后实现其中的decode方法即可，先来看下decode方法的定义：</p> <pre><code>     protected void decode(ChannelHandlerContext ctx,                              ByteBuf buf, List&lt;Object&gt; out) throws Exception  </code></pre> <p>输入的参数中buf是要解码的ByteBuf，out是解码过后的对象列表，我们需要把ByteBuf中的数据转换成为我们自己的对象加入out的list中。</p> <p>那么这里可能会遇到一个问题，因为我们在调用decode方法的时候buf中的数据可能还没有准备好，比如我们需要一个Integer，但是buf中的数据不够一个整数，那么就需要一些buf中数据逻辑的判断,我们以一个带有消息长度的Buf对象来描述一下这个过程。</p> <p>所谓带有消息长度的Buf对象，就是说Buf消息中的前4位，构成了一个整数，这个整数表示的是buf中后续消息的长度。</p> <p>所以我们读取消息进行转换的流程是，先读取前面4个字节，得到消息的长度，然后再读取该长度的字节，这就是我们真正要获取的消息内容。</p> <p>来看一下如果是继承自ByteToMessageDecoder应该怎么实现这个逻辑呢？</p> <pre><code>   public class IntegerHeaderFrameDecoder extends ByteToMessageDecoder {          @Override      protected void decode(ChannelHandlerContext ctx,                              ByteBuf buf, List&lt;Object&gt; out) throws Exception {           if (buf.readableBytes() &lt; 4) {           return;        }           buf.markReaderIndex();        int length = buf.readInt();           if (buf.readableBytes() &lt; length) {           buf.resetReaderIndex();           return;        }           out.add(buf.readBytes(length));      }    } </code></pre> <p>在decode中，我们首先需要判断buf中可读的字节有没有4个，没有的话直接返回。如果有，则先读取这4个字节的长度，然后再判断buf中的可读字节是否小于应该读取的长度，如果小于，则说明数据还没有准备好，需要调用resetReaderIndex进行重置。</p> <p>最后，如果所有的条件都满足，才真正进行读取工作。</p> <p>有没有一个办法可以不提前进行判断，可以直接按照自己想要的内容来读取buf的方式呢？答案就是ReplayingDecoder。</p> <p>我们先来看一下上面的例子用ReplayingDecoder重写是什么情况：</p> <pre><code>   public class IntegerHeaderFrameDecoder         extends ReplayingDecoder&lt;Void&gt; {         protected void decode(ChannelHandlerContext ctx,                              ByteBuf buf, List&lt;Object&gt; out) throws Exception {           out.add(buf.readBytes(buf.readInt()));      }    } </code></pre> <p>使用ReplayingDecoder，我们可以忽略buf是否已经接收到了足够的可读数据，直接读取即可。</p> <p>相比之下ReplayingDecoder非常的简单。接下来，我们来探究一下ReplayingDecoder的实现原理。</p> </h1> <p>ReplayingDecoder实际上是ByteToMessageDecoder的一个子类，它的定义如下：</p> <pre><code>public abstract class ReplayingDecoder&lt;S&gt; extends ByteToMessageDecoder  </code></pre> <p>在ByteToMessageDecoder中，最重要的方法是channelRead,在这个方法中实际调用了<code>callDecode(ctx, cumulation, out);</code>来实现cumulation到out的解码过程。</p> <p>ReplayingDecoder的秘密就在于对这个方法的重写，我们来看下这个方法的具体实现：</p> <pre><code>   protected void callDecode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) {         replayable.setCumulation(in);         try {             while (in.isReadable()) {                 int oldReaderIndex = checkpoint = in.readerIndex();                 int outSize = out.size();                 if (outSize &gt; 0) {                     fireChannelRead(ctx, out, outSize);                     out.clear();                     if (ctx.isRemoved()) {                         break;                     }                     outSize = 0;                 }                 S oldState = state;                 int oldInputLength = in.readableBytes();                 try {                     decodeRemovalReentryProtection(ctx, replayable, out);                     if (ctx.isRemoved()) {                         break;                     }                     if (outSize == out.size()) {                         if (oldInputLength == in.readableBytes() &amp;&amp; oldState == state) {                             throw new DecoderException(                                     StringUtil.simpleClassName(getClass()) + ".decode() must consume the inbound " +                                     "data or change its state if it did not decode anything.");                         } else {                             continue;                         }                     }                 } catch (Signal replay) {                     replay.expect(REPLAY);                     if (ctx.isRemoved()) {                         break;                     }                      // Return to the checkpoint (or oldPosition) and retry.                     int checkpoint = this.checkpoint;                     if (checkpoint &gt;= 0) {                         in.readerIndex(checkpoint);                     } else {                     }                     break;                 }                 if (oldReaderIndex == in.readerIndex() &amp;&amp; oldState == state) {                     throw new DecoderException(                            StringUtil.simpleClassName(getClass()) + ".decode() method must consume the inbound data " +                            "or change its state if it decoded something.");                 }                 if (isSingleDecode()) {                     break;                 }             }         } catch (DecoderException e) {             throw e;         } catch (Exception cause) {             throw new DecoderException(cause);         }     } </code></pre> <p>这里的实现和ByteToMessageDecoder不同的是ReplayingDecoder中定义了一个checkpoint,这个checkpint是在尝试进行数据解码之初设置的：</p> <pre><code>int oldReaderIndex = checkpoint = in.readerIndex(); </code></pre> <p>如果是在解码的过程中出现了异常，则使用checkpoint重置index：</p> <pre><code>    int checkpoint = this.checkpoint;          if (checkpoint &gt;= 0) {             in.readerIndex(checkpoint);         } else {     } </code></pre> <p>这里捕获的异常是Signal，Signal是什么呢？</p> <p>Signal是一个Error对象：</p> <pre><code>public final class Signal extends Error implements Constant&lt;Signal&gt;  </code></pre> <p>这个异常是从replayable中抛出来的。</p> <p>replayable是一个特有的ByteBuf对象，叫做ReplayingDecoderByteBuf:</p> <pre><code>final class ReplayingDecoderByteBuf extends ByteBuf </code></pre> <p>在ReplayingDecoderByteBuf中定义了Signal属性：</p> <pre><code>    private static final Signal REPLAY = ReplayingDecoder.REPLAY; </code></pre> <p>这个Signal异常是从ReplayingDecoderByteBuf中的get方法中抛出的，这里以getInt为例,看一下异常是如何抛出的：</p> <pre><code>    public int getInt(int index) {         checkIndex(index, 4);         return buffer.getInt(index);     }  </code></pre> <p>getInt方法首先会去调用checkIndex方法进行buff中的长度检测，如果小于要读取的长度，则会抛出异常REPLAY：</p> <pre><code>    private void checkIndex(int index, int length) {         if (index + length &gt; buffer.writerIndex()) {             throw REPLAY;         }     } </code></pre> <p>这就是Signal异常的由来。</p> </h1> <p>以上就是对ReplayingDecoder的介绍，虽然ReplayingDecoder好用，但是从它的实现可以看出，ReplayingDecoder是通过抛出异常来不断的重试，所以在某些特殊的情况下会造成性能的下降。</p> <p>也就是说在减少我们代码量的同时，降低了程序的执行效率。看来要想马儿跑又想马儿不吃草，这样的好事是不可能的了。</p> <blockquote> <p>本文已收录于 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.flydean.com/14-4-netty-replayingdecoder/"  target="_blank"  rel="nofollow">http://www.flydean.com/14-4-netty-replayingdecoder/</a></p> <p>最通俗的解读，最深刻的干货，最简洁的教程，众多你不知道的小技巧等你来发现！</p> <p>欢迎关注我的公众号:「程序那些事」,懂技术，更懂你！</p> </blockquote> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-38538.htm">小白开宠物店需要准备什么东西（开宠物店需要做什么）</a></p>
                                        <p>下一个：<a href="/news/article-39041.htm">小型宠物粮食加工设备价格表最新（小型宠物粮加工厂需要什么手续）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-47452.htm" title="动物防疫疫苗与接种疫苗区别是什么意思（动物疫苗是疫苗吗）">动物防疫疫苗与接种疫苗区别是什么意思（动物疫苗是疫苗吗）</a></li>
                        <li class="py-2"><a href="/news/article-26145.htm" title="springboot：异步注解@Async的前世今生_在线工具">springboot：异步注解@Async的前世今生_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-5-trojan-windows.htm" title="11月5日 | Trojan节点订阅每天更新18M/S免费节点订阅链接">11月5日 | Trojan节点订阅每天更新18M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-39041.htm" title="小型宠物粮食加工设备价格表最新（小型宠物粮加工厂需要什么手续）">小型宠物粮食加工设备价格表最新（小型宠物粮加工厂需要什么手续）</a></li>
                        <li class="py-2"><a href="/news/article-23849.htm" title="中国农业大学动物医院营业时间（中国农业大学动物医院值班表）">中国农业大学动物医院营业时间（中国农业大学动物医院值班表）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-24-trojan-node-share.htm" title="12月24日 | Trojan节点订阅每天更新22M/S免费节点订阅链接">12月24日 | Trojan节点订阅每天更新22M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-26-node-share.htm" title="12月26日 | Trojan节点订阅每天更新20.7M/S免费节点订阅链接">12月26日 | Trojan节点订阅每天更新20.7M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-49446.htm" title="动物疫苗佐剂类型（动物疫苗佐剂类型包括）">动物疫苗佐剂类型（动物疫苗佐剂类型包括）</a></li>
                        <li class="py-2"><a href="/news/article-46983.htm" title="动物防疫站可以给猫做绝育吗（动物防疫站给猫***免费吗）">动物防疫站可以给猫做绝育吗（动物防疫站给猫***免费吗）</a></li>
                        <li class="py-2"><a href="/news/article-29415.htm" title="开宠物店一个月能赚多少钱（开宠物店一天利润多少才能不亏）">开宠物店一个月能赚多少钱（开宠物店一天利润多少才能不亏）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container d-md-flex py-4">
            <div class="me-md-auto text-center text-md-start">
                <div class="copyright">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <a href="/">TrojanNode免费节点官网</a> 版权所有 Powered by WordPress
                </div>
            </div>
            <div class="social-links text-center text-md-right pt-3 pt-md-0">
                <a href="#" class="twitter"><i class="bx bxl-twitter"></i></a>
                <a href="#" class="facebook"><i class="bx bxl-facebook"></i></a>
                <a href="#" class="instagram"><i class="bx bxl-instagram"></i></a>
                <a href="#" class="google-plus"><i class="bx bxl-skype"></i></a>
                <a href="#" class="linkedin"><i class="bx bxl-linkedin"></i></a>
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/trojannode/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/trojannode/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/trojannode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/trojannode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>