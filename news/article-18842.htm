<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://trojannode.github.io/news/article-18842.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Python 实现走迷宫深度优先回溯算法（优质代码）</title>
        <meta name="description" content="#地图：0是可走的地方，1是障碍物     maze=np.array([[0,0,0,0,0],[0,1,0,1,0],[0,1,1,0,0],[0,1,1,0,0],[0,0,0,0,0]]) 入" />
        <link rel="icon" href="/assets/website/img/trojannode/favicon.ico" type="image/x-icon"/>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="__ADDON__/js/frontend/trojannode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/remixicon/remixicon.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/trojannode/style.css" rel="stylesheet">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-THYLRGLVV9"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-THYLRGLVV9');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top ">
        <div class="container d-flex align-items-center justify-content-between">
                        <a href="/"><span class="logo">Troja Nnode</span></a>
                        <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="#">关于</a></li>
                    <li><a class="nav-link" href="#">联系</a></li>
                </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h2>Python 实现走迷宫深度优先回溯算法（优质代码）</h2>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= About Section ======= -->
        <section id="about" class="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> </h1> <pre><code class="prism language-python"><span class="token comment">#地图：0是可走的地方，1是障碍物</span>     maze<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre> <p>入口和出口：</p> <pre><code class="prism language-python">    startP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#起点坐标</span>     endP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#终点坐标</span></code></pre> <p>没有传送门</p> </h1> <pre><code class="prism language-python"><span class="token keyword">import</span> numpy<span class="token keyword">as</span> np</code></pre> </h1> <pre><code class="prism language-python"><span class="token triple-quoted-string string">''' 类:Point 用来标识坐标点 '''</span><span class="token keyword">class</span><span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>row<span class="token operator">=</span>x         self<span class="token punctuation">.</span>col<span class="token operator">=</span>y</code></pre> </h1> <pre><code class="prism language-python"><span class="token triple-quoted-string string">''' 函数：判断两个点是否相同 参数:     Point p1      Point p2 '''</span><span class="token keyword">def</span><span class="token function">isSamePoint</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>row<span class="token operator">==</span>p2<span class="token punctuation">.</span>row<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>col<span class="token operator">==</span>p2<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">True</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">False</span><span class="token triple-quoted-string string">''' 函数：获取相邻未被访问的节点(上下左右) 参数说明：     mark：节点标记     point：节点      m：行      n：列 '''</span><span class="token keyword">def</span><span class="token function">getAdjacentNotVisitedNode</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span>point<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>     resP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span>         rep<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span>         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">return</span> resP</code></pre> </h1> <pre><code class="prism language-python"><span class="token triple-quoted-string string">''' 函数：寻路函数 参数：     maze：地图     m：行      n：列     pointStack：点栈，用于存放路径 '''</span><span class="token keyword">def</span><span class="token function">mazePath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">or</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>endP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>endP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token comment">#</span>     mark<span class="token operator">=</span>maze<span class="token comment">#将起点入栈</span>     pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>startP<span class="token punctuation">)</span>     mark<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment">#栈不空并且栈顶元素不为结束节点</span>     ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>isSamePoint<span class="token punctuation">(</span>ptop<span class="token punctuation">,</span>endP<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>         adjacentNotVisitedNode<span class="token operator">=</span>getAdjacentNotVisitedNode<span class="token punctuation">(</span>mark<span class="token punctuation">,</span>ptop<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">if</span> adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">continue</span>         mark<span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>         pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>adjacentNotVisitedNode<span class="token punctuation">)</span></code></pre> </h1> <pre><code class="prism language-python"><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#地图：0是可走的地方，1是障碍物</span>     maze<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      startP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#起点坐标</span>     endP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#终点坐标</span>          pointStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#设置点栈</span>     mazePath<span class="token punctuation">(</span>maze<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token comment">#执行寻路函数</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Died.....No way can go'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>         tmpStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Path:'</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>             tmpStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmpStack<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>             p<span class="token operator">=</span>tmpStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;{},{}&gt;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>row<span class="token punctuation">,</span>p<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> </h1> <pre><code class="prism language-python"><span class="token keyword">import</span> numpy<span class="token keyword">as</span> np<span class="token triple-quoted-string string">''' 类:Point 用来标识坐标点 '''</span><span class="token keyword">class</span><span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>row<span class="token operator">=</span>x         self<span class="token punctuation">.</span>col<span class="token operator">=</span>y<span class="token triple-quoted-string string">''' 函数：判断两个点是否相同 参数:     Point p1      Point p2 '''</span><span class="token keyword">def</span><span class="token function">isSamePoint</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>row<span class="token operator">==</span>p2<span class="token punctuation">.</span>row<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>col<span class="token operator">==</span>p2<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">True</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">False</span><span class="token triple-quoted-string string">''' 函数：获取相邻未被访问的节点(上下左右) 参数说明：     mark：节点标记     point：节点      m：行      n：列 '''</span><span class="token keyword">def</span><span class="token function">getAdjacentNotVisitedNode</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span>point<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>     resP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span>         rep<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span>         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">return</span> resP<span class="token triple-quoted-string string">''' 函数：寻路函数 参数：     maze：地图     m：行      n：列     pointStack：点栈，用于存放路径 '''</span><span class="token keyword">def</span><span class="token function">mazePath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">or</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>endP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>endP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token comment">#</span>     mark<span class="token operator">=</span>maze<span class="token comment">#将起点入栈</span>     pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>startP<span class="token punctuation">)</span>     mark<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment">#栈不空并且栈顶元素不为结束节点</span>     ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>isSamePoint<span class="token punctuation">(</span>ptop<span class="token punctuation">,</span>endP<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>         adjacentNotVisitedNode<span class="token operator">=</span>getAdjacentNotVisitedNode<span class="token punctuation">(</span>mark<span class="token punctuation">,</span>ptop<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">if</span> adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">continue</span>         mark<span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>         pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>adjacentNotVisitedNode<span class="token punctuation">)</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#地图：0是可走的地方，1是障碍物</span>     maze<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      startP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#起点坐标</span>     endP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#终点坐标</span>          pointStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#设置点栈</span>     mazePath<span class="token punctuation">(</span>maze<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token comment">#执行寻路函数</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Died.....No way can go'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>         tmpStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Path:'</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>             tmpStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmpStack<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>             p<span class="token operator">=</span>tmpStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;{},{}&gt;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>row<span class="token punctuation">,</span>p<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <p>输出寻路路径的点坐标：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/1013add8359ad4dc1bd4e0d7e787c1c3.jpg" alt="Python 实现走迷宫深度优先回溯算法（优质代码）"></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>下一个：<a href="/news/article-18844.htm">1970年4月20日农历是多少（1970年阴历四月二十阳历是多少）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-28490.htm" title="从源码角度分析创建线程池究竟有哪些方式">从源码角度分析创建线程池究竟有哪些方式</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-21-free-node-subscribe.htm" title="9月21日 | Trojan节点订阅每天更新22.5M/S免费节点订阅链接">9月21日 | Trojan节点订阅每天更新22.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-13-free-high-speed-nodes.htm" title="10月13日 | Trojan节点订阅每天更新21.6M/S免费节点订阅链接">10月13日 | Trojan节点订阅每天更新21.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-3-free-trojan-node.htm" title="10月3日 | Trojan节点订阅每天更新19.9M/S免费节点订阅链接">10月3日 | Trojan节点订阅每天更新19.9M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-23-trojan-github.htm" title="12月23日 | Trojan节点订阅每天更新21.6M/S免费节点订阅链接">12月23日 | Trojan节点订阅每天更新21.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-26145.htm" title="springboot：异步注解@Async的前世今生_在线工具">springboot：异步注解@Async的前世今生_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-28-latest-trojan-node.htm" title="12月28日 | Trojan节点订阅每天更新22.4M/S免费节点订阅链接">12月28日 | Trojan节点订阅每天更新22.4M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-21-today-trojan-node.htm" title="12月21日 | Trojan节点订阅每天更新18M/S免费节点订阅链接">12月21日 | Trojan节点订阅每天更新18M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-27094.htm" title="Java修饰符abstract与static及final的精华总结_java">Java修饰符abstract与static及final的精华总结_java</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-7-free-node-subscribe-links.htm" title="10月7日 | Trojan节点订阅每天更新21.2M/S免费节点订阅链接">10月7日 | Trojan节点订阅每天更新21.2M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container d-md-flex py-4">
            <div class="me-md-auto text-center text-md-start">
                <div class="copyright">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <a href="/">TrojanNode免费节点官网</a> 版权所有 Powered by WordPress
                </div>
            </div>
            <div class="social-links text-center text-md-right pt-3 pt-md-0">
                <a href="#" class="twitter"><i class="bx bxl-twitter"></i></a>
                <a href="#" class="facebook"><i class="bx bxl-facebook"></i></a>
                <a href="#" class="instagram"><i class="bx bxl-instagram"></i></a>
                <a href="#" class="google-plus"><i class="bx bxl-skype"></i></a>
                <a href="#" class="linkedin"><i class="bx bxl-linkedin"></i></a>
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/trojannode/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/trojannode/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/trojannode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/trojannode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>