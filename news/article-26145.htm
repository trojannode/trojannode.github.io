<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://trojannode.github.io/news/article-26145.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>springboot：异步注解@Async的前世今生_在线工具</title>
        <meta name="description" content="在前边的文章中，和小伙伴一起认识了异步执行的好处，以及如何进行异步开发，对，就是使用@Async注解，在使用异步注解@Async的过程中也存在一些坑，不过通过正确的打开方式也可以很好的避免，今天想和大" />
        <link rel="icon" href="/assets/website/img/trojannode/favicon.ico" type="image/x-icon"/>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="__ADDON__/js/frontend/trojannode/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/boxicons/css/boxicons.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/remixicon/remixicon.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/trojannode/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Template Main CSS File -->
    <link href="/assets/website/css/trojannode/style.css" rel="stylesheet">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-THYLRGLVV9"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-THYLRGLVV9');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- ======= Header ======= -->
    <header id="header" class="fixed-top ">
        <div class="container d-flex align-items-center justify-content-between">
                        <a href="/"><span class="logo">Troja Nnode</span></a>
                        <nav id="navbar" class="navbar">
                <ul>
                                        <li><a class="nav-link" href="/">首页</a></li>
                                        <li><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                        <li><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a class="nav-link" href="/news/">新闻资讯</a></li>
                                        <li><a class="nav-link" href="#">关于</a></li>
                    <li><a class="nav-link" href="#">联系</a></li>
                </ul>
                <i class="bi bi-list mobile-nav-toggle"></i>
            </nav><!-- .navbar -->
        </div>
    </header><!-- End Header -->
    <main id="main">
        <!-- ======= Breadcrumbs ======= -->
        <section class="breadcrumbs">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <h2>springboot：异步注解@Async的前世今生_在线工具</h2>
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ol>
                </div>
            </div>
        </section><!-- End Breadcrumbs -->
        <!-- ======= About Section ======= -->
        <section id="about" class="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                          				  				  				<p><span style="font-size: 16px">在前边的文章中，和小伙伴一起认识了异步执行的好处，以及如何进行异步开发，对，就是使用@Async注解，在使用异步注解@Async的过程中也存在一些坑，不过通过正确的打开方式也可以很好的避免，今天想和大家分享下@Async的原理，开始前先温习下之前的文章哦，</span></p> <p><span style="font-size: 16px"><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/teach/p/14127024.html"  target="_blank"  rel="nofollow">springboot：异步调用@Async</a></span></p> <p><span style="font-size: 16px"><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/teach/p/15169153.html"  target="_blank"  rel="nofollow">springboot：使用异步注解@Async获取执行结果的坑</a></span></p> <p><span style="font-size: 16px"><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/teach/p/15202284.html"  target="_blank"  rel="nofollow">springboot：嵌套使用异步注解@Async还会异步执行吗</a></span></p> </h1> <p><span style="font-size: 16px">在前边说到在使用@Async的时候，在一个类中两个@Async的方法嵌套使用会导致异步失败，下面把场景重现下，</span></p> <p><span style="font-size: 16px">AsyncContoller.java</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.controller;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service.AsyncService; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.beans.factory.annotation.Autowired; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Controller; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.GetMapping; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.ResponseBody; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.ExecutionException;  @Controller </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> AsyncController {     @Autowired     </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService asyncService;     @GetMapping(</span>"/aysnc"<span style="color: rgba(0, 0, 0, 1)">)     @ResponseBody     </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String asyncMethod(){         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {             Long start</span>=<span style="color: rgba(0, 0, 0, 1)">System.currentTimeMillis();             </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调用method3方法，该方法中嵌套了一个异步方法</span>             String str3=<span style="color: rgba(0, 0, 0, 1)">asyncService.method3().get();             Long end</span>=<span style="color: rgba(0, 0, 0, 1)">System.currentTimeMillis();             System.out.println(</span>"执行时长:"+(end-<span style="color: rgba(0, 0, 0, 1)">start));         } </span><span style="color: rgba(0, 0, 255, 1)">catch</span> (ExecutionException |<span style="color: rgba(0, 0, 0, 1)"> InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> "hello @Async"<span style="color: rgba(0, 0, 0, 1)">;     } }</span></span></pre> </div> <p><span style="font-size: 16px">下面是method3方法</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.Async; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.AsyncResult; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Service; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.Future;  @Service @Async </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService {     </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第一个异步方法，睡眠10s返回字符串      *      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future&lt;String&gt;<span style="color: rgba(0, 0, 0, 1)"> method() {         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {             Thread.sleep(</span>10 * 1000<span style="color: rgba(0, 0, 0, 1)">);         } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult("I am method"<span style="color: rgba(0, 0, 0, 1)">);     }      </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第三个异步方法，在该异步方法中调用了另外一个异步方法      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future&lt;String&gt;<span style="color: rgba(0, 0, 0, 1)"> method3(){         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">{<br>            //睡眠10s             Thread.sleep(</span>10*1000<span style="color: rgba(0, 0, 0, 1)">);             System.out.println(</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">);<br>            //method方法也是睡眠10s             </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.method();          }</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult&lt;&gt;("two async method"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></span></pre> </div> <p><span style="font-size: 16px">上面便是method3方法，以及嵌套在method3方法中的method方法，这两个方法体上均没有标注@Async，只是在这个类上使用了@Async注解，那么该类中的所有方法都是异步的。</span></p> <p><span style="font-size: 16px">执行结果如下，</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px">2022-04-30 15:29:47.711  INFO 16836 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 4<span style="color: rgba(0, 0, 0, 1)"> ms com.example.myDemo.service.AsyncService@7e316231 执行时长:</span>20028</span></pre> </div> <p><span style="font-size: 16px">从上面可以看到整个方法的执行时长是20多秒，那么就说明这种<strong>同一个类中的嵌套调用，@Async是失效的</strong>。</span></p> </h1> <h2><span style="font-size: 16px">1、把嵌套方法抽到另一个类中</span></h2> <p><span style="font-size: 16px">这种方式就是把嵌套的异步方法method抽取到另外一个类中，下面我们来看下，</span></p> <p><span style="font-size: 16px">OtherService.java</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.Async; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.AsyncResult; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Service; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.Future;  @Service @Async </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OtherAsyncService {     </span><span style="color: rgba(0, 0, 255, 1)">public</span> Future&lt;String&gt;<span style="color: rgba(0, 0, 0, 1)"> method() {         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {             Thread.sleep(</span>10 * 1000<span style="color: rgba(0, 0, 0, 1)">);         } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult("I am method"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></span></pre> </div> <p><span style="font-size: 16px">那么AsyncService.java则变成下面的样子</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.beans.factory.annotation.Autowired; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.Async; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.AsyncResult; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.Future;  @Service @Async </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService {     </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">注入OtherService</span> <span style="color: rgba(0, 0, 0, 1)">    @Autowired     </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> OtherAsyncService otherAsyncService;          </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第三个异步方法，在该异步方法中调用了另外一个异步方法      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future&lt;String&gt;<span style="color: rgba(0, 0, 0, 1)"> method3(){         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">{             Thread.sleep(</span>10*1000<span style="color: rgba(0, 0, 0, 1)">);             System.out.println(</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">);            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调用OtherAsyncService的method方法</span> <span style="color: rgba(0, 0, 0, 1)">            otherAsyncService.method();          }</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult&lt;&gt;("two async method"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></span></pre> </div> <p><span style="font-size: 16px">下面看执行的结果，</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px">2022-04-30 15:44:18.914  INFO 16768 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5<span style="color: rgba(0, 0, 0, 1)"> ms com.example.myDemo.service.AsyncService@689927ef 执行时长:</span>10016</span></pre> </div> <p><span style="font-size: 16px">执行时长10s多点，符合预期。</span></p> <h2><span style="font-size: 16px">2、自己注入自己</span></h2> <p><span style="font-size: 16px">这种方式很有意思，我斗胆给它取名为“自己注入自己”，在AsyncService类中注入一个AsyncService的实例，如下</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.beans.factory.annotation.Autowired; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.Async; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.AsyncResult; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.Future;  @Service @Async </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService {    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">这里注入的是AsyncService的实例<br></span>    @Lazy <span style="color: rgba(0, 0, 0, 1)">    @Autowired     </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService otherAsyncService;     </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第一个异步方法，睡眠10s返回字符串      *      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future&lt;String&gt;<span style="color: rgba(0, 0, 0, 1)"> method() {         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {             Thread.sleep(</span>10 * 1000<span style="color: rgba(0, 0, 0, 1)">);         } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult("I am method"<span style="color: rgba(0, 0, 0, 1)">);     }     </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第三个异步方法，在该异步方法中调用了另外一个异步方法      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future&lt;String&gt;<span style="color: rgba(0, 0, 0, 1)"> method3(){         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">{             Thread.sleep(</span>10*1000<span style="color: rgba(0, 0, 0, 1)">);             System.out.println(</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">);             otherAsyncService.method();          }</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult&lt;&gt;("two async method"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></span></pre> </div> <p><span style="font-size: 16px">小伙伴们注意，我是在AsyncService类中又注入了一个AsyncService的实例，在method3方法中调用的是AsyncSerevice的方法method，要区别于下面的调用方式</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"> <span style="color: rgba(0, 0, 255, 1)">this</span>.method();</span></pre> </div> <p><span style="font-size: 16px">下面看下执行结果，</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px">2022-04-30 15:55:30.635  INFO 9788 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5<span style="color: rgba(0, 0, 0, 1)"> ms com.example.myDemo.service.AsyncService@2ac186f8 执行时长:</span>10015</span></pre> </div> <p><span style="font-size: 16px">好了，我们看到执行时长为10s多点，也就是说异步是生效的，在这种方式中要注意<strong>注入的对象必须添加@Lazy注解，</strong>否则启动会报错哦。</span></p> </h1> <p><span style="font-size: 16px">上面已经把嵌套使用的误区和解决方式已经总结完了，下面到了要揭开@Async面纱的时候了，最好的方式是debug，看下面@Async的debug的过程</span></p> <p><span style="font-size: 16px"><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/340695095f44d84449ec95ecf29327f8.jpg" alt="springboot：异步注解@Async的前世今生_在线工具"></span></p> <p><span style="font-size: 16px"> </span></p> <p><span style="font-size: 16px">可以看到在AsyncController中asyncService是一个代理对象，且使用的方式是cglib，那么也就是会把其中的方法进行代理，类似下面的代码</span></p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1); font-size: 16px">before(); method3(); after();</span></pre> </div> <p><span style="font-size: 16px">也就是对method3进行了代理，这里的代理指的是把mthod3方法封装成一个task，交给线程池去执行，那么在method3中的this.method()这句调用，也就是普通调用了，是同步的，为什么这样说，因为这里的this代表的是AsyncService这个实例对象，</span></p> <p><span style="font-size: 16px"><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/9b94c7c3b2308671170d4c8fb7775007.jpg" alt="springboot：异步注解@Async的前世今生_在线工具"></span></p> <p><span style="font-size: 16px">但是如果换成"自己注入自己的方式"，例如下图，</span></p> <p><span style="font-size: 16px"><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/ec017ba818769b82952329be5d406303.jpg" alt="springboot：异步注解@Async的前世今生_在线工具"></span></p> <p><span style="font-size: 16px">可以看到还是一个AsyncService的cglib代理对象，所以完美解决了嵌套调用的问题。</span></p> </h1> <p><span style="font-size: 16px">本文分析了@Async注解的实现原理及如何使用正确使用嵌套调用，</span></p> <p><span style="font-size: 16px">1、@Async注解底层使用的是代理，标记为@Async所在的类在实际调用时是一个代理类；</span></p> <p><span style="font-size: 16px">2、合理使用@Async方法的嵌套，可以把嵌套方法抽到另外一个类中；</span></p> <p><span style="font-size: 16px">3、如果在本类中使用嵌套方法，那么需要自己注入自己，切记加上@Lazy注解；</span></p> <p><span style="font-size: 16px"> </span></p> <p><span style="font-size: 16px; background-color: rgba(255, 255, 255, 1); color: rgba(255, 0, 0, 1)"><strong>推荐阅读</strong></span></p> <p><span style="font-size: 16px"><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/teach/p/14127024.html"  target="_blank"  rel="nofollow">springboot：异步调用@Async</a></span></p> <p><span style="font-size: 16px"><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/teach/p/15169153.html"  target="_blank"  rel="nofollow">springboot：使用异步注解@Async获取执行结果的坑</a></span></p> <p><span style="font-size: 16px"><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/teach/p/15202284.html"  target="_blank"  rel="nofollow">springboot：嵌套使用异步注解@Async还会异步执行吗</a></span></p> <p><span style="font-size: 16px"><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/4c9168960190bc229a4cfced32748cd3.jpg" alt="springboot：异步注解@Async的前世今生_在线工具"></span></p> <p><span style="font-size: 16px"> </span></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-26143.htm">Citus 分布式 PostgreSQL 集群 &#8211; SQL Reference(SQL支持和变通方案)</a></p>
                                        <p>下一个：<a href="/news/article-26626.htm">java 写文件 权限不够_教你解决Linux系统中JAVA创建文件后权限不足的问题</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-9-24-trojan-github.htm" title="9月24日 | Trojan节点订阅每天更新22.7M/S免费节点订阅链接">9月24日 | Trojan节点订阅每天更新22.7M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-24775.htm" title="PHP对象接口">PHP对象接口</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-28-free-high-speed-nodes.htm" title="8月28日 | Trojan节点订阅每天更新22.7M/S免费节点订阅链接">8月28日 | Trojan节点订阅每天更新22.7M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-5-latest-trojan-node.htm" title="12月5日 | Trojan节点订阅每天更新20.7M/S免费节点订阅链接">12月5日 | Trojan节点订阅每天更新20.7M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-20-trojan-node-github.htm" title="11月20日 | Trojan节点订阅每天更新20.9M/S免费节点订阅链接">11月20日 | Trojan节点订阅每天更新20.9M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-19-free-node-subscribe.htm" title="11月19日 | Trojan节点订阅每天更新19M/S免费节点订阅链接">11月19日 | Trojan节点订阅每天更新19M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-24-trojan-node-github.htm" title="11月24日 | Trojan节点订阅每天更新21.2M/S免费节点订阅链接">11月24日 | Trojan节点订阅每天更新21.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-2-free-high-speed-nodes.htm" title="12月2日 | Trojan节点订阅每天更新19.2M/S免费节点订阅链接">12月2日 | Trojan节点订阅每天更新19.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-21092.htm" title="宠物零食加工厂要投资多少亿 宠物零食加工厂要投资多少亿元">宠物零食加工厂要投资多少亿 宠物零食加工厂要投资多少亿元</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-1-latest-trojan-node.htm" title="11月1日 | Trojan节点订阅每天更新21M/S免费节点订阅链接">11月1日 | Trojan节点订阅每天更新21M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- End About Section -->
    </main><!-- End #main -->
        <!-- ======= Footer ======= -->
    <footer id="footer">
        <div class="container d-md-flex py-4">
            <div class="me-md-auto text-center text-md-start">
                <div class="copyright">
                    <a href="/">TrojanNode免费节点官网</a> 版权所有 Powered by WordPress
                </div>
            </div>
            <div class="social-links text-center text-md-right pt-3 pt-md-0">
                <a href="#" class="twitter"><i class="bx bxl-twitter"></i></a>
                <a href="#" class="facebook"><i class="bx bxl-facebook"></i></a>
                <a href="#" class="instagram"><i class="bx bxl-instagram"></i></a>
                <a href="#" class="google-plus"><i class="bx bxl-skype"></i></a>
                <a href="#" class="linkedin"><i class="bx bxl-linkedin"></i></a>
            </div>
        </div>
    </footer><!-- End Footer -->
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/trojannode/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/isotope-layout/isotope.pkgd.min.js"></script>
    <script src="/assets/website/js/frontend/trojannode/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/trojannode/purecounter/purecounter.js"></script>
    <script src="/assets/website/js/frontend/trojannode/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/assets/website/js/frontend/trojannode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>